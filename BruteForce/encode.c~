/*
 *
 * Lin Yuan
 * University of Maryland, College Park
 *
 * Implementation of POW3 FSM state encoding
 * The transition probability is calculated 
 * by using Markov chain model.
 *
 * Psuedo code of the POW3 algorithm refers to 
 * Luca Benini et al.'s State Assignment for Low Power Dissipation
 * in IEEE Journal of Solid-State Circuits 1995
 *
 * This is a modified pow3 encode algorithm
 * It can be simply embedded to other program
 * 
 *
 * Update: removed a few bugs. It can process any large FSM benchmarks from kiss2
 * Update: use the fsm_t datastructure.
 *
 * Last modified May 4, 2009
 *
 */
 
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "struct.h"
#include "global.h"
#include "pow3_struct.h"

extern int hamming_distance(char *s1, char *s2, int n);
extern double **get_trans_prob(fsm_t *fsm);

// global variable
pow3_stg_t *_pow3_stg;
int **l2h_switch_tbl;
int **h2l_switch_tbl;
int globalPeakSwitch;
int *globalOptVector;

extern fsm_t *fsm;
/******************************** 
initialize the matrix for pow3 
**********************************/
boolean initialize_stg(fsm_t *fsm)
{
  int i, j;
  int num_edge;
  double **trans_prob = NULL;
  double **weight_matrix = NULL;

  if(fsm == NULL)
    return FALSE;

  trans_prob = get_trans_prob(fsm);  
  if(trans_prob == NULL)
    return FALSE;

  weight_matrix = (double **)calloc(fsm->num_state, sizeof(double *));
  for(i = 0; i < fsm->num_state; i++) {
    weight_matrix[i] = (double *)calloc(fsm->num_state, sizeof(double));
    for(j = 0; j < fsm->num_state; j++) {
      if(trans_prob[i][j] > 0 || trans_prob[j][i] > 0)
	weight_matrix[i][j] = trans_prob[i][j] + trans_prob[j][i];
      else
	weight_matrix[i][j] = 0;
    }
  }

  _pow3_stg = (pow3_stg_t *)malloc(sizeof(pow3_stg_t));
  _pow3_stg->num_node = fsm->num_state; 
  _pow3_stg->code_length = fsm->code_length;
  _pow3_stg->weight_matrix = weight_matrix;
  _pow3_stg->node = (pow3_node_t *)calloc(_pow3_stg->num_node, sizeof(pow3_node_t));
  _pow3_stg->set = (pow3_set_t *)calloc(_pow3_stg->num_node, sizeof(pow3_set_t));

  _pow3_stg->num_set = 0;
  for(i = 0; i < _pow3_stg->num_node; i++) {
    _pow3_stg->set[i].set_size = 0;
    _pow3_stg->set[i].node_list = NULL;
  }
  

  for(i = 0; i < _pow3_stg->num_node; i++) {
    _pow3_stg->node[i].index = i;
    _pow3_stg->node[i].state = &fsm->state[i];
    _pow3_stg->node[i].set_id = UNDEFINE;
    _pow3_stg->node[i].code = (char *)calloc(_pow3_stg->code_length + 1, sizeof(char));
    for(j = 0; j < _pow3_stg->code_length; j++)
      _pow3_stg->node[i].code[j] = 'x';
  }

  num_edge = 0;
  // don't consider self loop as an edge
  for(i = 0; i < fsm->num_state; i++) {
    for(j = i + 1; j < fsm->num_state; j++) {
      if(weight_matrix[i][j] > 0) {
	num_edge++;
	if(num_edge == 1)
	  _pow3_stg->edge_list = (pow3_edge_t **)calloc(1, sizeof(pow3_edge_t *));
	else
	  _pow3_stg->edge_list = (pow3_edge_t **)realloc(_pow3_stg->edge_list, num_edge*sizeof(pow3_edge_t *));
	_pow3_stg->edge_list[num_edge-1] = (pow3_edge_t *)malloc(sizeof(pow3_edge_t));
	_pow3_stg->edge_list[num_edge-1]->n1 = &_pow3_stg->node[i];
	_pow3_stg->edge_list[num_edge-1]->n2 = &_pow3_stg->node[j];
	_pow3_stg->edge_list[num_edge-1]->weight = weight_matrix[i][j];
      }
    }  
  }
  
  _pow3_stg->num_edge = num_edge;
  free(trans_prob);
}


/*************************
get the current STG
**************************/
pow3_stg_t *get_stg(void)
{
  return _pow3_stg;
}

/*********************************************
add a node to the k-th set in STG
*********************************************/
void add_node_to_set(pow3_stg_t *stg, pow3_node_t *node, int k)
{
  int num_element;
  node->set_id = k;
  stg->set[k].set_size++;
  num_element = stg->set[k].set_size;
  if(num_element == 1)
    stg->set[k].node_list = (pow3_node_t **)calloc(num_element, sizeof(pow3_node_t *));
  else
    stg->set[k].node_list = (pow3_node_t **)realloc(stg->set[k].node_list, num_element * sizeof(pow3_node_t *));
  
  stg->set[k].node_list[num_element - 1] = node;
}

/**************************************************
  calculate the classes and the size of each class 
**************************************************/
void adjust_class_constr(pow3_stg_t *stg)
{
  int i,j;
  int set_id = 0;

  for(i = 0; i < stg->num_node; i++) {
    stg->node[i].set_id = UNDEFINE;
  }

  // reset all the sets in STG
  for(i = 0; i < stg->num_set; i++) {
    stg->set[i].set_size = 0;
    free(stg->set[i].node_list);
    stg->set[i].node_list = NULL;
  }
  stg->num_set = 0;

  for(i = 0; i < stg->num_node; i++) {
    // if two nodes have same partial code, they belong to same set
    for(j = 0; j < i; j++) {
      if(stg->node[j].set_id != UNDEFINE && hamming_distance(stg->node[i].code, stg->node[j].code, stg->code_length) == 0) {
	set_id = stg->node[j].set_id;
	add_node_to_set(stg, &stg->node[i], set_id);
	break;
      }
    }
    // else add this node to a new set
    if(stg->node[i].set_id == UNDEFINE) {
      add_node_to_set(stg, &stg->node[i], stg->num_set);
      stg->num_set++;
    }
  }
}

/************************************************
 update edge weights after each bit assignment
*************************************************/
void adjust_edge_weight(pow3_stg_t *stg)
{
  int i,j;
  for(i = 0; i < stg->num_node; i++)
    for(j = 0; j < stg->num_node; j++)
      stg->weight_matrix[i][j] *= hamming_distance(stg->node[i].code, stg->node[j].code, stg->code_length) +1;
  
  for(i = 0; i < stg->num_edge; i++) {
    stg->edge_list[i]->weight *= hamming_distance(stg->edge_list[i]->n1->code, stg->edge_list[i]->n2->code, stg->code_length) + 1; 
  }
}

/************************************************
assign the state codes in STG to FSM
************************************************/
void update_fsm_code(pow3_stg_t *stg, fsm_t *fsm)
{
  int i;
  state_t *state;

  for(i = 0; i < stg->num_node; i++) {
    state = stg->node[i].state;
    if(state->code != NULL)
      free(state->code);
    state->code = (char *)calloc(stg->code_length + 1, sizeof(char *));
    strcpy(state->code, stg->node[i].code);
  }

  fsm->code_length = stg->code_length;
}

void free_node(pow3_node_t *node)
{
  if(node->code)
    free(node->code);
}

void free_set(pow3_set_t *set)
{
  int i;

  if(set->node_list) 
    free(set->node_list);
}

/**********************************
free STG data structure
**********************************/
void free_stg(pow3_stg_t *stg)
{
  int i;

  if(stg->node) {
    for(i = 0; i < stg->num_node; i++)
      free_node(&stg->node[i]);
    free(stg->node);
  }

  if(stg->edge_list) {
    for(i = 0; i < stg->num_edge; i++)
      free(stg->edge_list[i]);
    free(stg->edge_list);
  }
  
  if(stg->set) {
    for(i = 0; i < stg->num_set; i++)
      free_set(&stg->set[i]);
    free(stg->set);
  }

  if(stg->weight_matrix) {
    for(i = 0;i < stg->num_node; i++)
      free(stg->weight_matrix[i]);
    free(stg->weight_matrix);
  }

  free(stg);

  _pow3_stg = NULL;
}

int vector_to_integer(int *vec, int n)
{
  int i;
  int value;
  value = 0;
  for(i=0;i<n;i++)
    value = value + (int)(vec[i]*pow(2,i));
  return value;
}

int *integer_to_vector(int value, int n)
{
  int i,m;
  int *vector;
  vector = (int *)malloc(n * sizeof(int));
  for(i=0; i<n; i++)
    {
      m = floor(value/pow(2,i));
      if( m % 2 ==0)
	vector[i]=0;
      else
	vector[i]=1;
    }
  return vector;
}

void build_peak_switch_table(int num_state, int code_len)
{
  int i, j, k;
  int max_num_state = pow(2, code_len);
  int quo1, quo2;
  int res1, res2;

  //Obtain switch look-up l2h__switch_tbl(0->1) and h2l_switch_tbl(1->0)
  l2h_switch_tbl = (int **)malloc(max_num_state * sizeof(int *));
  h2l_switch_tbl = (int **)malloc(max_num_state * sizeof(int *));
  for(i = 0; i < max_num_state; i++) {
    l2h_switch_tbl[i] = (int *)malloc(max_num_state * sizeof(int));
    h2l_switch_tbl[i] = (int *)malloc(max_num_state * sizeof(int));
  }

  for(i = 0; i < max_num_state; i++) {
    for(j = 0; j < max_num_state; j++) {
      l2h_switch_tbl[i][j] = 0;
      h2l_switch_tbl[i][j] = 0;
    }
  }

  for(i = 0; i < max_num_state; i++) {
    for(j = 0; j < max_num_state; j++) {
      quo1 = i;
      quo2 = j;
      for(k = 0; k < code_len; k++) {
	res1 = quo1%2;
	quo1 = quo1/2;
	res2 = quo2%2;
	quo2 = quo2/2;
	if(res1 < res2)
	  l2h_switch_tbl[i][j]++;
	else if(res1 > res2)
	  h2l_switch_tbl[i][j]++;
      }
    }
  }  
}

int get_peak_switch(int *code_list)
{
  fsm_t *fsm = get_fsm();
  int i;
  int cs_id, ns_id;
  int cs_code_value, ns_code_value;
  int peak_switch;

  peak_switch = 0;

  for(i = 0; i < fsm->num_transition; i++) {
    cs_id = (fsm->transition[i].current_state)->index;
    ns_id = (fsm->transition[i].next_state)->index;
    cs_code_value = code_list[cs_id];
    ns_code_value = code_list[ns_id];
    if(l2h_switch_tbl[cs_code_value][ns_code_value] > peak_switch)
      peak_switch = l2h_switch_tbl[cs_code_value][ns_code_value];
    if(h2l_switch_tbl[cs_code_value][ns_code_value] > peak_switch)
      peak_switch = h2l_switch_tbl[cs_code_value][ns_code_value];
  }
}

/**************************************************
recursively apply all possible encoding to FSM
and get the best encoding
***************************************************/
void optimize_peak(int k, int n, int *output_vector, int *value_vector) 
{
  int i = 0, j = 0;
  int *new_value_vec = NULL;
  int peak_switch = 0;

  for(i = n-1; i >= 0; i--) {
    // select a value from the value vector
    output_vector[k] = value_vector[i];
    if(k == 0) {
      // if it's the last value, print out the permutation
      peak_switch = get_peak_switch(output_vector);
      if(peak_switch < globalPeakSwitch) {
	globalPeakSwitch = peak_switch;
	for(j = 0; j < fsm->num_state; j++)
	  globalOptVector = output_vector[j];
      }
    }
    else {
      // exlude the selected value from value vector
      new_value_vec = (int *)calloc(n - 1, sizeof(int));
      for(j = 0; j < i; j++)
	new_value_vec[j] = value_vector[j];
      for(j = i; j < n-1; j++)
	new_value_vec[j] = value_vector[j+1];

      permute_number(k-1, n-1, output_vector, new_value_vec);
      free(new_value_vec);
    }
  }
}

/***********************************************
main engine for brute force encoding
***********************************************/
boolean encode_brute_force(fsm_t *fsm)
{
  int i;
  int max_num_code = pow(2, fsm->code_length);
  int *code_vector = (int *)calloc(fsm->num_state, sizeof(int));
  int *value_vector = (int *)calloc(max_num_code, sizeof(int));

  globalPeakSwitch = 0;
  globalOptVector = (int *)calloc(fsm->num_state, sizeof(int));
  for(i = 0; i < fsm->num_state; i++)
    globalOptVector[i] = 0;

  for(i = 0; i < max_num_code; i++)
    value_vector[i] = i;
  
  // return the code to FSM
  optimize_peak(fsm->num_state, max_num_code, code_vector, value_vector); 

  return TRUE;
}







